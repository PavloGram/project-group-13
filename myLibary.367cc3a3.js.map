{"mappings":"iiBAAAA,EAAA,S,WCAA,IAAAC,EAAAD,EAAA,S,2FAKME,EAAcC,SAASC,cAAc,aACrCC,EAAgBF,SAASC,cAAc,eACvCE,EAAeH,SAASC,cAAc,oBACtCG,EAAiBJ,SAASC,cAAc,UAG5CI,EAAQ,IAAAC,QAiBJC,EAAgB,IAAnB,W,sBAlBGC,I,aACJC,EAAAC,EAAA,CAAAC,KAAAN,EAAQ,C,kBAAG,qCAGTM,KAAKC,KAAO,C,iBAGRC,IAAA,c,MAAN,SAAkBC,G,kBAAlBL,EAAAX,EAAA,CAAAW,EAAAM,GAAAC,MAAA,SAAAC,I,2FAEiBC,EAAAC,QAAMC,IACjB,sCAAoCC,OAAEP,EAAQ,aAAyBO,OAAAZ,EAAAa,EAAA,CAAAC,EAARlB,K,+CAGjE,M,yBAAM,IAAImB,MAAMC,EAAAC,GAAIC,S,uDANxB,E,OAWC,IAEH,SAASC,IACPzB,EAAa0B,UAAY,GAEzB,IAAMC,EAAYC,aAAaC,QA9BP,WAgClBC,EAAWC,KAAKC,MAAML,GAEF,IAApBG,EAASG,QACThC,EAAeiC,UAAUC,OAAO,aAGlCvC,EAAYsC,UAAUE,SAAS,cACjCxC,EAAYsC,UAAUC,OAAO,aAE/BpC,EAAcmC,UAAUG,IAAI,aAC5BtC,EAAcmC,UAAUG,IAAI,cAC5BzC,EAAYsC,UAAUC,OAAO,cAE7B,IAAIG,EAAgB,GAChBC,EAAQ,CACVC,QAAS,IAGX,GAAIV,EACF,IAEGA,EAASW,KAAI,SAAAC,GACZtC,EACGuC,YAAYD,GACZE,MAAK,SAAAC,G,IAAGC,EAAID,EAAJC,KACPR,EAAgBQ,EAAKC,OAAON,KAAI,SAAAO,G,OAASA,EAAMN,E,IAC/CI,EAAKG,UAAYX,EACjBQ,EAAKC,OAAON,KAAI,SAAAO,G,OAASF,EAAKG,UAAUC,KAAKF,EAAMN,G,IACnDH,EAAMC,QAAQU,KAAKJ,E,IAEpBK,OAAM,SAAAC,GACLC,QAAQC,IAAIF,E,IAEbG,SAAQ,W,OAAM,EAAAC,EAAAC,cAAalB,E,OAEhC,MAAOmB,GACPL,QAAQK,MAAM,oBAAqBA,EAAMlC,Q,EAmD/CzB,EAAc4D,iBAAiB,QAASlC,GACxC7B,EAAY+D,iBAAiB,SA/C7B,WACE3D,EAAa0B,UAAY,GAEzB,IAAMC,EAAYC,aAAaC,QA3EP,SA4ElBC,EAAWC,KAAKC,MAAML,GAEF,IAApBG,EAASG,QACXhC,EAAeiC,UAAUC,OAAO,aAGhCpC,EAAcmC,UAAUE,SAAS,cACnCrC,EAAcmC,UAAUC,OAAO,aAEjCvC,EAAYsC,UAAUG,IAAI,aAC1BtC,EAAcmC,UAAUC,OAAO,cAC/BvC,EAAYsC,UAAUG,IAAI,cAE1B,IAAIC,EAAgB,GAChBC,EAAQ,CACVC,QAAS,IAGX,GAAIV,EACF,IAEIA,EAASW,KAAI,SAAAC,GACbtC,EACGuC,YAAYD,GACZE,MAAK,SAAAC,G,IAAGC,EAAID,EAAJC,KACPR,EAAgBQ,EAAKC,OAAON,KAAI,SAAAO,G,OAASA,EAAMN,E,IAC/CI,EAAKG,UAAYX,EACjBQ,EAAKC,OAAON,KAAI,SAAAO,G,OAASF,EAAKG,UAAUC,KAAKF,EAAMN,G,IACnDH,EAAMC,QAAQU,KAAKJ,E,IAGpBK,OAAM,SAAAC,GACLC,QAAQC,IAAIF,E,IAEbG,SAAQ,W,OAAM,EAAAC,EAAAC,cAAalB,E,OAEhC,MAAOmB,GACPL,QAAQK,MAAM,oBAAqBA,EAAMlC,Q,KAO/CoC,OAAOD,iBAAiB,OAAQlC,G","sources":["src/myLibary.js","src/js/get_localstorage_info.js"],"sourcesContent":["import './js/spinner.js'\nimport './js/modal-team.js'\nimport './js/get_localstorage_info.js'\nimport './js/modal-about-movie.js'\n","import { renderMarkup } from './render-markup';\nimport axios from 'axios';\n\nconst STORAGE_KEY_WATCH = 'watched';\nconst STORAGE_KEY_QUEUE = 'queue';\nconst queueButton = document.querySelector('.js_queue');\nconst watchedButton = document.querySelector('.js_watched');\nconst galleryFilms = document.querySelector('.galleryFilms-js');\nconst nomoviesimages = document.querySelector('.start');\n\nclass ApiMovieSearch {\n  #API_KEY = '1962278b5026dd7c7bb0a91cd47f798b';\n\n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchMovies(film_Id) {\n    try {\n      return await axios.get(\n        `https://api.themoviedb.org/3/movie/${film_Id}?api_key=${this.#API_KEY}`\n      );\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n}\n\nconst apiInfoMovies = new ApiMovieSearch();\n\nfunction handleGetWatchedFilms() {\n  galleryFilms.innerHTML = '';\n  \n  const savedData = localStorage.getItem(STORAGE_KEY_WATCH);\n  \n  const filmData = JSON.parse(savedData);\n  \n    if (filmData.length === 0) {\n        nomoviesimages.classList.remove('is-hidden');\n    }\n\n  if (queueButton.classList.contains('is-active')) {\n    queueButton.classList.remove('is-active');\n  }\n  watchedButton.classList.add('is-active');\n  watchedButton.classList.add('btn-active');\n  queueButton.classList.remove('btn-active');\n\n  let datagenre_ids = [];\n  let films = {\n    results: [],\n  };\n\n  if (filmData) {\n    try {\n      \n       filmData.map(id => {\n        apiInfoMovies\n          .fetchMovies(id)\n          .then(({ data }) => {\n            datagenre_ids = data.genres.map(genre => genre.id);\n            data.genre_ids = datagenre_ids;\n            data.genres.map(genre => data.genre_ids.push(genre.id));\n            films.results.push(data);\n          })\n          .catch(err => {\n            console.log(err);\n          })\n          .finally(() => renderMarkup(films));\n      });\n    } catch (error) {\n      console.error('Get state error: ', error.message);\n    }\n  }\n}\n\nfunction handleGetQueueFilms() {\n  galleryFilms.innerHTML = '';\n\n  const savedData = localStorage.getItem(STORAGE_KEY_QUEUE);\n  const filmData = JSON.parse(savedData);\n\n    if (filmData.length === 0) {\n      nomoviesimages.classList.remove('is-hidden');\n    } \n\n  if (watchedButton.classList.contains('is-active')) {\n    watchedButton.classList.remove('is-active');\n  }\n  queueButton.classList.add('is-active');\n  watchedButton.classList.remove('btn-active');\n  queueButton.classList.add('btn-active');\n\n  let datagenre_ids = [];\n  let films = {\n    results: [],\n  };\n\n  if (filmData) {\n    try {\n      \n        filmData.map(id => {\n        apiInfoMovies\n          .fetchMovies(id)\n          .then(({ data }) => {\n            datagenre_ids = data.genres.map(genre => genre.id);\n            data.genre_ids = datagenre_ids;\n            data.genres.map(genre => data.genre_ids.push(genre.id));\n            films.results.push(data);\n            // console.log(films);\n          })\n          .catch(err => {\n            console.log(err);\n          })\n          .finally(() => renderMarkup(films));\n      });\n    } catch (error) {\n      console.error('Get state error: ', error.message);\n    }\n  }\n}\n\nwatchedButton.addEventListener('click', handleGetWatchedFilms);\nqueueButton.addEventListener('click', handleGetQueueFilms);\nwindow.addEventListener('load', handleGetWatchedFilms);\n"],"names":["parcelRequire","$bpxeT","$ee2debf4941c2c14$var$queueButton","document","querySelector","$ee2debf4941c2c14$var$watchedButton","$ee2debf4941c2c14$var$galleryFilms","$ee2debf4941c2c14$var$nomoviesimages","$ee2debf4941c2c14$var$_API_KEY","WeakMap","$ee2debf4941c2c14$var$apiInfoMovies","ApiMovieSearch","$parcel$interopDefault","$8MQK7","this","page","key","film_Id","$2TvXO","mark","_callee","$dIxxU","default","get","concat","$4KMWL","_this","Error","_ctx","t0","message","$ee2debf4941c2c14$var$handleGetWatchedFilms","innerHTML","savedData","localStorage","getItem","filmData","JSON","parse","length","classList","remove","contains","add","datagenre_ids","films","results","map","id","fetchMovies","then","param","data","genres","genre","genre_ids","push","catch","err","console","log","finally","$7VSht","renderMarkup","error","addEventListener","window"],"version":3,"file":"myLibary.367cc3a3.js.map"}